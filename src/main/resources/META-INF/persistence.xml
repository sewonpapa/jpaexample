<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persistence version="3.0" xmlns="https://jakarta.ee/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence
             https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd">

    <!-- reference: https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0#a12384 -->
    <!-- postgresql db persistence unit -->
    <persistence-unit name="jpabegin" transaction-type="RESOURCE_LOCAL">
        <!-- mapping class setting -->
        <class>kr.co.seeya.jpaexample.reserve.domain.User</class>
        <properties>
            <!-- 일상적으로 사용되는 기본 설정들 -->
            <property name="jakarta.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
            <property name="jakarta.persistence.jdbc.url"    value="jdbc:mysql://localhost:13306/jpabegin?characterEncoding=utf8" />
            <property name="jakarta.persistence.jdbc.user"   value="herotice" />
            <property name="jakarta.persistence.jdbc.password" value="dbsk36751@#" />
            <property name="jakarta.persistence.lock.timeout" value="100"/>
            <property name="jakarta.persistence.query.timeout" value="100"/>
            <property name="hibernate.dialect"    value="org.hibernate.dialect.MySQLDialect" />
            <property name="hibernate.hikari.poolName"    value="pool" />
            <property name="hibernate.hikari.maximumPoolSize" value="10"/>
            <property name="hibernate.hikari.minimumIdle"   value="10" />
            <property name="hibernate.hikari.connectionTimeout"   value="1000" />
            <property name="hibernate.format_sql" value="true" />
            <property name="hibernate.use_sql_comments" value="true" />
            <property name="hibernate.physical_naming_strategy" value="org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy"/>
            <property name="hibernate.jdbc.batch_size" value="10"/>


            <!-- *************************************************** -->
            <!-- 아래부터 sql 파일을 통한 DDL, DML 자동 실행 설정법입니다. -->
            <!-- *************************************************** -->

            <!-- program 실행할 때마다 DROP 하고 CREATE 하기로 지정함.
                한번 실행하고 나서는 value="none" 으로 바꾸면 테스트에서
                생긴 변동사항을 계속 유지할 수 있다. -->
            <!--<property name="jakarta.persistence.schema-generation.database.action"
                      value="drop-and-create"/>-->

            <!-- 만약에 hibernate 를 사용 중이면, hibernate.hbm2ddl.auto 로 대체가 가능합니다.
                주의할 점: jakarta.persistence.schema-generation.database.action 와
                hibernate.hbm2ddl.auto 태그가 둘 중 하나가 ignore 됩니다.
                저도 다 테스트해보진 않아서 "둘 중 하나"라고 표현합니다.
            -->
            <!--<property name="hibernate.hbm2ddl.auto" value="create" />-->

            <!-- "create schema" 문법 사용 가능 여부 지정 -->
            <!--<property name="jakarta.persistence.schema-generation.create-database-schemas"
                      value="true"/>-->

            <!-- 생성과 관련된 ddl 을 script 를 통해서 수행 -->
            <!--<property name="jakarta.persistence.schema-generation.create-source"
                      value="script"/>-->

            <!-- 작성해 놓은 생성 DDL SQL 파일 경로 지정 -->
            <!--<property name="jakarta.persistence.schema-generation.create-script-source"
                      value="META-INF/sql/blog_web/blog_web_ddl.sql"/>-->

            <!-- 삭제와 관련된 ddl 을 script 를 통해서 수행 -->
            <!--<property name="jakarta.persistence.schema-generation.drop-source"
                      value="script"/>-->

            <!-- 작성해 놓은 삭제 DDL SQL 파일 경로 지정 -->
            <!--<property name="jakarta.persistence.schema-generation.drop-script-source"
                      value="META-INF/sql/blog_web/blog_web_drop.sql"/>-->

            <!-- insert 관련 DML SQL 을 작성한 파일 경로 지정 -->
            <!--<property name="jakarta.persistence.sql-load-script-source"
                      value="META-INF/sql/blog_web/blog_web_data.sql"/>-->

            <!-- 의외로 복병인 설정. 위의 sql 들은 사실 각 쿼리를 "한줄로" 작성하는 것이 정석이다. 하지만 그러면 가독성이 너무 안 좋다.
                이를 해결하기 위해서 Hibernate 는 멀티라인이 가능하도록 Extractor 를 제공한다. 사용하면 New Line 이 있어도
                문제없이 실행된다.
             -->
            <property name="hibernate.hbm2ddl.import_files_sql_extractor"
                      value="org.hibernate.tool.schema.internal.script.MultiLineSqlScriptExtractor" />
        </properties>
    </persistence-unit>
</persistence>